{"ast":null,"code":"import { isField, isReference } from '../../utilities/graphql/storeUtils.js';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\n\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\n\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\n\nfunction fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(FieldNamePattern);\n  return match && match[0];\n}\n\nfunction isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\n\nfunction makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\n\nvar reconcileProcessedFields = function reconcileProcessedFields(existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n\n  return this.merge(existing, incoming);\n};\n\nexport { fieldNameFromStoreName, getTypenameFromStoreObject, isFieldValueToBeMerged, makeProcessedFieldsMerger };","map":null,"metadata":{},"sourceType":"module"}