{"ast":null,"code":"import { graphQLResultHasError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.observableQuery = null;\n    this.subscriptions = new Set();\n    this.dirty = false;\n    this.diff = null;\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this && this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.observableQuery = query.observableQuery;\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDirty = function () {\n    var _this = this;\n\n    if (!this.dirty) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _a, _b;\n\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && ((_a = diff) === null || _a === void 0 ? void 0 : _a.result) !== ((_b = oldDiff) === null || _b === void 0 ? void 0 : _b.result)) {\n      this.setDirty();\n    }\n  };\n\n  QueryInfo.prototype.getDiff = function () {\n    if (!this.diff) {\n      var oq = this.observableQuery;\n      var lastResult = oq && oq.getLastResult();\n      var lastError = oq && oq.getLastError();\n      var fetchPolicy = oq && oq.options.fetchPolicy || \"cache-first\";\n      var errorPolicy = this.getErrorPolicy();\n      var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== this.graphQLErrors;\n\n      if (lastResult && lastResult.data && !errorStatusChanged) {\n        this.diff = {\n          result: lastResult.data,\n          complete: true\n        };\n      } else if (fetchPolicy !== \"no-cache\" && fetchPolicy !== \"network-only\") {\n        this.diff = this.cache.diff({\n          query: this.document,\n          variables: this.variables,\n          returnPartialData: true,\n          optimistic: true\n        });\n      }\n    }\n\n    return this.diff;\n  };\n\n  QueryInfo.prototype.getErrorPolicy = function () {\n    var oq = this.observableQuery;\n    return oq && oq.options.errorPolicy || \"none\";\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n\n    if (this.shouldNotify() && this.getDiff()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (!this.observableQuery) {\n      return true;\n    }\n\n    var _a = this.observableQuery.options,\n        fetchPolicy = _a.fetchPolicy,\n        returnPartialData = _a.returnPartialData,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n\n    if (fetchPolicy === \"standby\") {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus)) {\n      var lastResult = this.observableQuery.getLastResult();\n      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== this.networkStatus);\n      var shouldNotifyIfLoading = returnPartialData || this.networkStatus === NetworkStatus.setVariables || networkStatusChanged && notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n\n      if (!shouldNotifyIfLoading) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    this.cancel();\n    delete this.cancel;\n    this.variables = this.networkStatus = this.networkError = this.graphQLErrors = void 0;\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (options) {\n    var _this = this;\n\n    this.cancel();\n\n    var previousResult = function previousResult() {\n      var previousResult = null;\n      var observableQuery = _this.observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    this.cancel = this.cache.watch({\n      query: this.document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function callback(diff) {\n        _this.setDiff(diff);\n      }\n    });\n    return this;\n  };\n\n  QueryInfo.prototype.markResult = function (result, _a, allowCacheWrite, makeReady) {\n    var fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables,\n        errorPolicy = _a.errorPolicy;\n\n    if (fetchPolicy === 'no-cache') {\n      this.setDiff({\n        result: result.data,\n        complete: true\n      });\n    } else if (allowCacheWrite) {\n      var ignoreErrors = errorPolicy === 'ignore' || errorPolicy === 'all';\n      var writeWithErrors = !graphQLResultHasError(result);\n\n      if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n      }\n\n      if (writeWithErrors) {\n        this.cache.write({\n          result: result.data,\n          dataId: 'ROOT_QUERY',\n          query: this.document,\n          variables: variables\n        });\n      }\n    }\n\n    if (makeReady) {\n      this.networkError = null;\n      this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n      this.networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkError = error;\n    this.networkStatus = NetworkStatus.error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };","map":null,"metadata":{},"sourceType":"module"}