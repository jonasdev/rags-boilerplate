{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { visit } from 'graphql/language/visitor';\n\nfunction shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 39) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nfunction getDirectiveNames(doc) {\n  var names = [];\n  visit(doc, {\n    Directive: function Directive(node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\n\nfunction hasDirectives(names, doc) {\n  return getDirectiveNames(doc).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\n\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nfunction getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 40) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n      var ifArgument = directiveArguments[0];\n      process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 41) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n      var ifValue = ifArgument.value;\n      process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 42) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}\n\nexport { getDirectiveNames, getInclusionDirectives, hasClientExports, hasDirectives, shouldInclude };","map":null,"metadata":{},"sourceType":"module"}