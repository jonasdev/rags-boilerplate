{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { addTypenameToDocument } from '../../utilities/graphql/transform.js';\nimport { dep, wrap } from 'optimism';\nimport { ApolloCache } from '../core/cache.js';\nimport { Policies, defaultDataIdFromObject } from './policies.js';\nimport { EntityStore, supportsResultCaching } from './entityStore.js';\nimport { StoreReader } from './readFromStore.js';\nimport { StoreWriter } from './writeToStore.js';\nvar defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  typePolicies: {}\n};\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.txCount = 0;\n    _this.varDep = dep();\n    _this.config = __assign(__assign({}, defaultConfig), config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n    _this.data = new EntityStore.Root({\n      policies: _this.policies,\n      resultCaching: _this.config.resultCaching\n    });\n    _this.optimisticData = _this.data;\n    _this.storeWriter = new StoreWriter({\n      policies: _this.policies\n    });\n    _this.storeReader = new StoreReader({\n      addTypename: _this.addTypename,\n      policies: _this.policies\n    });\n    var cache = _this;\n    var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n    _this.maybeBroadcastWatch = wrap(function (c) {\n      return maybeBroadcastWatch.call(_this, c);\n    }, {\n      makeCacheKey: function makeCacheKey(c) {\n        var store = c.optimistic ? cache.optimisticData : cache.data;\n\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n              rootId = c.rootId,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, JSON.stringify({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    return _this;\n  }\n\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    if (typeof options.rootId === 'string' && !store.has(options.rootId)) {\n      return null;\n    }\n\n    return this.storeReader.readQueryFromStore({\n      store: store,\n      query: options.query,\n      variables: options.variables,\n      rootId: options.rootId,\n      config: this.config\n    }) || null;\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    this.storeWriter.writeQueryToStore({\n      store: this.data,\n      query: options.query,\n      result: options.result,\n      dataId: options.dataId,\n      variables: options.variables\n    });\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.modify = function (dataId, modifiers, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    var store = optimistic ? this.optimisticData : this.data;\n\n    if (store.modify(dataId, modifiers)) {\n      this.broadcastWatches();\n      return true;\n    }\n\n    return false;\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      config: this.config\n    });\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      _this.watches.delete(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function () {\n    return this.optimisticData.gc();\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    return this.policies.identify(object);\n  };\n\n  InMemoryCache.prototype.evict = function (dataId, fieldName) {\n    var evicted = this.optimisticData.evict(dataId, fieldName);\n    this.broadcastWatches();\n    return evicted;\n  };\n\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.optimisticData = this.data;\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n    var _this = this;\n\n    var perform = function perform(layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        transaction(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    if (typeof optimisticId === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n    } else {\n      perform();\n    }\n\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n    return this.performTransaction(transaction, id);\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function () {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n    c.callback(this.diff({\n      query: c.query,\n      variables: c.variables,\n      optimistic: c.optimistic\n    }));\n  };\n\n  InMemoryCache.prototype.makeVar = function (value) {\n    var cache = this;\n    return function rv(newValue) {\n      if (arguments.length > 0) {\n        if (value !== newValue) {\n          value = newValue;\n          cache.varDep.dirty(rv);\n          cache.broadcastWatches();\n        }\n      } else {\n        cache.varDep(rv);\n      }\n\n      return value;\n    };\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","map":null,"metadata":{},"sourceType":"module"}